#cloud-config
write-files:
  - path: "/etc/flannel/options.env"
    owner: "root"
    content: |
      FLANNELD_IFACE=$private_ipv4
      FLANNELD_ETCD_ENDPOINTS=${FLANNELD_ETCD_ENDPOINTS}
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sf $${1}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - path: /tmp/set-info.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      echo PRIVATE_IP=$COREOS_PRIVATE_IPV4 >> /etc/kubernetes.env
      echo PUBLIC_IP=$COREOS_PUBLIC_IPV4 >> /etc/kubernetes.env
  - path: /tmp/master.sh
    permission: '0755'
    content: |
      #!/bin/bash
      set -e
      set -x

      source /etc/kubernetes.env

      mkdir -p /etc/kubernetes/manifests
      mkdir -p /srv/kubernetes/manifests

      cat <<EOF > /etc/kubernetes/manifests/kube-apiserver.yaml
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: gcr.io/google_containers/hyperkube:v${KUBERNETES_VERSION}
          command:
          - /hyperkube
          - apiserver
          # - --insecure-bind-address=0.0.0.0
          - --bind-address=0.0.0.0
          - --etcd-servers=${ETCD_ENDPOINTS}
          - --allow-privileged=true
          - --service-cluster-ip-range=${SERVICE_IP_RANGE}
          - --secure-port=${API_SECURE_PORT}
          # - --insecure-port=8080
          - --advertise-address=${PRIVATE_IP}
          - --admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
          - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
          - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          # - --token-auth-file=/etc/kubernetes/ssl/tokens.csv
          - --logtostderr=true
          - --cloud-provider=aws
          ports:
          - containerPort: ${API_SECURE_PORT}
            hostPort: ${API_SECURE_PORT}
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
      EOF

      cat <<EOF > /srv/kubernetes/manifests/kube-controller-manager.yaml
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
      spec:
        containers:
        - name: kube-controller-manager
          image: gcr.io/google_containers/hyperkube:v${KUBERNETES_VERSION}
          command:
          - /hyperkube
          - controller-manager
          - --master=http://127.0.0.1:8080
          - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --root-ca-file=/etc/kubernetes/ssl/ca.pem
          # - --cluster-name=${CLUSTER_NAME}
          - --cloud-provider=aws
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        hostNetwork: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
      EOF

      cat <<EOF > /etc/kubernetes/manifests/kube-podmaster.yaml
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-podmaster
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: scheduler-elector
          image: gcr.io/google_containers/podmaster:1.1
          command:
          - /podmaster
          - --etcd-servers=${ETCD_ENDPOINTS}
          - --key=scheduler
          - --whoami=${PRIVATE_IP}
          - --source-file=/src/manifests/kube-scheduler.yaml
          - --dest-file=/dst/manifests/kube-scheduler.yaml
          volumeMounts:
          - mountPath: /src/manifests
            name: manifest-src
            readOnly: true
          - mountPath: /dst/manifests
            name: manifest-dst
        - name: controller-manager-elector
          image: gcr.io/google_containers/podmaster:1.1
          command:
          - /podmaster
          - --etcd-servers=${ETCD_ENDPOINTS}
          - --key=controller
          - --whoami=${PRIVATE_IP}
          - --source-file=/src/manifests/kube-controller-manager.yaml
          - --dest-file=/dst/manifests/kube-controller-manager.yaml
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /src/manifests
            name: manifest-src
            readOnly: true
          - mountPath: /dst/manifests
            name: manifest-dst
        volumes:
        - hostPath:
            path: /srv/kubernetes/manifests
          name: manifest-src
        - hostPath:
            path: /etc/kubernetes/manifests
          name: manifest-dst
      EOF

      cat <<EOF > /etc/kubernetes/manifests/kube-proxy.yaml
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: gcr.io/google_containers/hyperkube:v${KUBERNETES_VERSION}
          command:
          - /hyperkube
          - proxy
          - --master=http://127.0.0.1:8080
          - --proxy-mode=iptables
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
      EOF

      cat <<EOF > /srv/kubernetes/manifests/kube-scheduler.yaml
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: gcr.io/google_containers/hyperkube:v${KUBERNETES_VERSION}
          command:
          - /hyperkube
          - scheduler
          - --master=http://127.0.0.1:8080
          # - --logtostderr=true
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 1
      EOF

coreos:
  units:
  - name: flanneld.service
    command: start
    drop-ins:
      - name: "40-ExecStartPre-symlink.conf"
        content: |
          [Service]
          ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
      - name: "50-network-config.conf"
        content: |
          [Unit]
          Requires=etcd2.service
          After=etcd2.service
          [Service]
          ExecStartPre=/opt/bin/wupiao http://127.0.0.1:2379/v2/members
          ExecStartPre=/usr/bin/etcdctl --no-sync set /coreos.com/network/config '{ "Network": "${KUBERNETES_CONTAINERS_CIDR}", "Backend":{"Type": "vxlan"} }'
          [Install]
          WantedBy=multi-user.target
  - name: docker.service
    command: start
    drop-ins:
      - name: "40-flannel.conf"
        content: |
          [Unit]
          Requires=flanneld.service
          After=flanneld.service
  - name: kubelet.service
    command: start
    content: |
      [Service]
      ExecStart=/usr/bin/kubelet \
        --api_servers=http://127.0.0.1:8080 \
        --register-node=false \
        --allow-privileged=true \
        --config=/etc/kubernetes/manifests \
        --hostname-override=$private_ipv4 \
        --cluster-dns=${DNS_SERVICE_IP} \
        --cluster-domain=cluster.local
      Restart=always
      RestartSec=10
      [Install]
      WantedBy=multi-user.target
  - name: set-instance-info.service
    content: |
      [Unit]
      Description=Set instance information
      [Service]
      Type=oneshot
      EnvironmentFile=/etc/kubernetes.env
      ExecStart=/usr/bin/bash -c /tmp/set-info.sh
  - name: master-setup.service
    content: |
      [Unit]
      Requires=setipinfo.service
      After=setipinfo.service
      [Service]
      Type=oneshot
      EnvironmentFile=/etc/kubernetes.env
      ExecStart=/usr/bin/bash -c /tmp/master.sh
  update:
    reboot-strategy: "off"
